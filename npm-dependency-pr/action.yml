name: '@tjsr/gh-util-actions/npm-dependency-pr'
description: Update an npm dependency and raise a PR
author: Tim Rowe <tim@tjsr.id.au>
inputs:
  token:
    type: string
    description: 'The GitHub token to use for PR creation'
    required: true
  dependency:
    type: string
    description: 'Dependency to update'
    required: true
  repoPath:
    type: string
    description: 'The path to the repository to run git pr commands within which the target repo will be cloned to as a local working copy.'
    required: false
  externalRepo:
    type: string
    description: 'The external repository to run the action against.  eg owner/repo'
    required: false
  project:
    type: string
    description: 'The target project name that must be the owner of the package. This is usually the directory name the package.json file resides under, not the name field in package.json'
    required: false
  projectPath:
    type: string
    description: 'The path to the project to run npm-related scripts within'
    required: false
  nodeVersion:
    type: string
    description: 'The npm version to install with setup-node. If not provided, will not be installed. Scope will default to the current user, and repository to npm.pkg.github.com.  If you wish to customise these values, setup node manually.'
    required: false
  npmVersion:
    type: string
    description: 'Default: 10.8.2. The npm version to install with npm install -g. >=10.8.2 required'
    required: false
    default: '10.8.2'
  skipCi:
    type: boolean
    description: 'Whether to skip the npm ci command execution being called implicitly'
    required: false
    default: fales
  packageVersion:
    type: string
    description: 'The version of the package to install. If not provided, will search for the latest version'
    required: false
  failOnNoNewVersion:
    type: boolean
    description: 'Whether the build should fail with an exit code if no new version is available for the specified package'
    required: false
    default: false
  reviewers:
    type: string
    description: 'Comma-separated list of reviewers to add to the PR'
    required: false

outputs:
  hasNewVersion:
    description: 'Whether or not there is a new version'
    value: ${{ steps.action-npm-outdated.outputs.hasNewVersion }}
  branchName:
    description: 'The name of the branch created'
    value: ${{ steps.action-npm-outdated.outputs.branchName }}
  pullRequestNumber:
    description: 'The number of the pull request created'
    value: ${{ steps.action-npm-outdated.outputs.pull-request-number }}
  pullRequestUrl:
    description: 'The URL of the pull request created'
    value: ${{ steps.action-npm-outdated.outputs.pull-request-url }}
  pullRequestOperation:
    description: 'The operation performed on the pull request'
    value: ${{ steps.action-npm-outdated.outputs.pull-request-operation }}

runs:
  # run-name: Update ${{ inputs.dependency }} npm dependency and raise a PR
  using: 'composite'
  steps:
  - name: Set script path
    shell: bash
    run: |
      echo "SCRIPT_DIR=$GITHUB_ACTION_PATH/scripts" >> $GITHUB_ENV

  # Setup .npmrc file to publish to GitHub Packages
  - uses: actions/setup-node@v4
    if: inputs.nodeVersion
    with:
      node-version: 20.15.1
      # cache: 'npm'
      registry-url: 'https://npm.pkg.github.com'
      # Defaults to the user or organization that owns the workflow file
      scope: "@${{ github.organization }}"

  - name: Install npm ${{ inputs.npmVersion}}
    run: npm install -g npm@${{ inputs.npmVersion}}
    shell: bash

  - name: Cache node modules
    id: cache-node_modules
    uses: actions/cache@main
    env:
      cache-name: cache-node-modules
    with:
      # npm cache files are stored in `~/.npm` on Linux/macOS
      path: ~/node_modules
      # todo - change this so we are less restrictive on package-lock changes
      key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

  - name: Install ${{ env.PROJECT }} dependencies
    id: install
    if: inputs.skipCi != 'true'
    shell: bash
    run: |
      if [ ! -z "${{ inputs.projectPath }}" ]; then
        cd ${{ inputs.projectPath }}
      fi
      npm ci

  - name: Get latest version for ${{ inputs.package }} on ${{ env.PROJECT }}
    id: get-latest-version
    if: ${{ inputs.packageVersion == '' }}
    uses: tjsr/action-npm-outdated@main
    with:
      project: ${{ inputs.project }}
      dependency: ${{ inputs.dependency }}
      projectPath: ${{ inputs.projectPath }}
      failOnNoNewVersion: ${{ inputs.failOnNoNewVersion }}

  - name: Output the current working directory for debugging.
    shell: bash
    run: echo "Current working directory is $PWD, script dir is $SCRIPT_DIR, action path is $GITHUB_ACTION_PATH"

  - name: Get version number to use
    id: get-version
    shell: bash
    env:
      LATEST_VERSION: ${{ steps.get-latest-version.outputs.latest }}
      WANTED_VERSION: ${{ steps.get-latest-version.outputs.wanted }}
      SPECIFIED_VERSION: ${{ inputs.packageVersion }}
      INPUT_USE_LATEST: ${{ inputs.useLatest }}
      INPUT_DEPENDENCY: ${{ inputs.dependency }}
    run: . $SCRIPT_DIR/version-select.sh

  - name: Get target branch name
    id: get-branch
    shell: bash
    env:
      VERSION: ${{ steps.get-version.outputs.version }}
    if: steps.get-version.outputs.hasNewVersion == 'true' || inputs.package-version != ''
    run: |
      echo "Value of get-version outputs is ${{ steps.get-version.outputs.version }}"
      if [ -z "$VERSION" ]; then
        echo "No new version found for ${{ inputs.dependency }} when getting target branch name."
      else
        echo "branch=dependency/${{ inputs.dependency }}/$VERSION" >> "$GITHUB_OUTPUT"
      fi

  # - name: Get branch names.
  #   id: branch-names
  #   uses: tj-actions/branch-names@v8

  - name: Check if PR exists
    id: check-pr-exists
    uses: tjsr/action-pr-exists@main
    if: steps.get-version.outputs.hasNewVersion == 'true' && steps.get-branch.outputs.branch != ''
    with:
      token: ${{ inputs.token }}
      branch: ${{ steps.get-branch.outputs.branch }}
      repository: ${{ inputs.externalRepo || github.repository }}

  - name: Update ${{ inputs.dependency }} via npm
    if: steps.get-version.outputs.hasNewVersion == 'true' && steps.check-pr-exists.outputs.exists == 'false'
    id: update-package
    shell: bash
    run: |
      if [ ! -z "${{ inputs.projectPath }}" ]; then
        cd ${{ inputs.projectPath }}
      fi
      echo Installing updated npm depenency ${{ inputs.dependency }}@${{ steps.get-version.outputs.version }}
      npm install --save ${{ inputs.dependency }}@${{ steps.get-version.outputs.version }}

  - name: Verify update was necessary
    if: steps.get-version.outputs.hasNewVersion != 'true' || steps.check-pr-exists.outputs.exists != 'false'
    id: update-status
    shell: bash
    run: echo "status=cancelled" >> "$GITHUB_OUTPUT"

  - name: Extract base branch name
    id: base-branch
    if: steps.get-version.outputs.hasNewVersion == 'true' && steps.check-pr-exists.outputs.exists == 'false'
    shell: bash
    run: |
      BASE_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
      echo "PR will be based off branch $BASE_BRANCH"
      echo "branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"

  - name: Create a Pull Request for the changes
    id: create-pr
    if: steps.get-version.outputs.hasNewVersion == 'true' && steps.check-pr-exists.outputs.exists == 'false'
    uses: peter-evans/create-pull-request@v6
    with:
      commit-message: Update ${{ inputs.dependency }} to ${{ steps.get-version.outputs.version }}
      title: Update ${{ inputs.dependency }} to ${{ steps.get-version.outputs.version }}
      base: ${{ steps.base-branch.outputs.branch }}
      branch: ${{ steps.get-branch.outputs.branch }}
      reviewers: ${{ inputs.reviewers || github.actor || github.triggering_actor || github.repository_owner }}
      path: ${{ inputs.repoPath }}

