name: '@tjsr/gh-util-actions/version-bump-publish'
description: Update an npm dependency and raise a PR
author: Tim Rowe <tim@tjsr.id.au>
inputs:
  token:
    type: string
    description: 'The GitHub token to use for PR creation'
    required: true
  no-publish:
    type: boolean
    description: "Bump the version number, but don't publish the package"
    required: false
    default: false
  no-tag:
    type: boolean
    description: "Bump the version number, but don't tag the commit"
    required: false
    default: false
  patchlevel:
    type: string
    description: 'The release level to use for the new version number. [*prerelease|patch|minor|major]'
    required: false
    default: 'prerelease'
  preid:
    type: string
    description: 'The version preid portion to use in the version string, eg "dev"=>1.0.0-dev.0. Requires "release" for not value.'
    required: false
    default: 'dev'
  requiresPr:
    type: boolean
    description: 'Whether to raise a PR for the new version'
    required: false
    default: false

outputs:
  version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
  published:
    description: 'Whether the package was published'
    value: ${{ steps.publish-package.outputs.published == 'true' && 'true' || 'false' }}

runs:
  # run-name: Update ${{ inputs.dependency }} npm dependency and raise a PR
  using: 'composite'
  steps:
  - name: Validate patchlevel input
    id: validate-patchlevel
    shell: bash
    run: |
      if [[ ! ${{ inputs.patchlevel }} =~ ^(prerelease|patch|minor|major)$ ]]; then
        echo "Invalid patchlevel value provided: ${{ inputs.patchlevel }}"
        exit 1
      fi

  - name: Set script path
    shell: bash
    run: |
      SCRIPT_DIR=$GITHUB_ACTION_PATH/scripts
      echo "SCRIPT_DIR=$SCRIPT_DIR" >> $GITHUB_ENV
      echo SCRIPT_DIR is $SCRIPT_DIR

  - name: Set the base branch for any PR
    shell: bash
    run: |
      BASE_BRANCH=${GITHUB_REF#refs/heads/}
      echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV
      echo BASE_BRANCH is $BASE_BRANCH

  - name: Get the latest published version number
    id: get-latest-version
    shell: bash
    env:
      PREID: ${{ inputs.preid }}
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: $SCRIPT_DIR/current-package.sh

  - name: Set working branch
    shell: bash
    env:
      REQUIRES_PR: ${{ inputs.requiresPr }}
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: |
      SHORT_BRANCH_NAME=${GITHUB_REF#refs/heads/}
      if [ "$SHORT_BRANCH_NAME" == 'main' ]; then
        WORKING_BRANCH=release/${{ steps.get-latest-version.outputs.nextVersion }}
      else
        if [ "$REQUIRES_PR" == 'true' ]; then
          WORKING_BRANCH=release/dev/${{ steps.get-latest-version.outputs.nextVersion }}
        else
          WORKING_BRANCH=${GITHUB_REF#refs/heads/}
        fi
      fi
      echo "WORKING_BRANCH=$WORKING_BRANCH" >> $GITHUB_ENV
      echo WORKING_BRANCH is $WORKING_BRANCH

  - name: Create a branch if a PR is required
    id: create-branch
    if: ${{ inputs.requiresPr == 'true' }}
    shell: bash
    env:
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: |
      echo "Creating branch $WORKING_BRANCH"
      git switch -c $WORKING_BRANCH
      git rebase $BASE_BRANCH
      git push -u origin $WORKING_BRANCH

  - name: Install ${{ steps.get-latest-version.outputs.name }} dependencies
    id: install
    env:
      NODE_AUTH_TOKEN: "${{ inputs.token }}"
    shell: bash
    run: npm ci

  - name: Set the github user config for the actions bot.
    shell: bash
    run: |
      git config --global user.name "github-actions[bot]"
      git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

  - name: Set the version to the latest published version then bump the patch version
    id: bump-version
    shell: bash
    env:
      PREID: ${{ inputs.preid }}
      NEXT_VERSION_NUMBER: ${{ steps.get-latest-version.outputs.nextVersion }}
      PACKAGE_NAME: ${{ steps.get-latest-version.outputs.name }}
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: $SCRIPT_DIR/bump-version.sh

  # - name: Get the base branch this version is based on.
  #   id: base-branch
  #   if: steps.get-version.outputs.hasNewVersion == 'true' && steps.check-pr-exists.outputs.exists == 'false'
  #   shell: bash
  #   run: |
  #     BASE_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
  #     echo "PR will be based off branch $BASE_BRANCH"
  #     echo "branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"

  - name: Commit and push package.json files
    id: push-package-json
    if: ${{ inputs.no-publish != 'true' }}
    env:
      PACKAGE_WITH_VERSION: ${{ steps.bump-version.outputs.fullVersion }}
      PACKAGE_NAME: ${{ steps.get-latest-version.outputs.name }}
    shell: bash
    run: |
      echo "Publishing package $PACKAGE_WITH_VERSION"
      git add package.json package-lock.json
      git commit -m "Update $PACKAGE_NAME to $PACKAGE_WITH_VERSION"
      git pull --rebase
      echo "Pushing to $WORKING_BRANCH without tags..."
      git push

  - name: Tag if required
    id: git-tag
    if: ${{ inputs.no-tag != 'true' }}
    shell: bash
    env:
      VERSION_TAG: 'v${{ steps.bump-version.outputs.version }}'
      PACKAGE_WITH_VERSION: ${{ steps.bump-version.outputs.fullVersion }}
      PACKAGE_NAME: ${{ steps.get-latest-version.outputs.name }}
    run: |
      if git tag | grep -q "^$VERSION_TAG$"; then
        echo "Tag $VERSION_TAG exists, deleting first..."
        echo "Deleting existing tag $VERSION_TAG if it exists."
        git tag -d "$VERSION_TAG"
      else
        echo "Tag $VERSION_TAG does not exist"
      fi
      echo "Tagging $VERSION_TAG"
      git tag -fa "$VERSION_TAG" -m "Update $PACKAGE_NAME to $PACKAGE_WITH_VERSION"

      echo "Pushing git tags."
      git push --tags -f

  - name: Publish the package
    id: publish-package
    if: ${{ inputs.no-publish != 'true' }}
    env:
      NODE_AUTH_TOKEN: ${{ inputs.token }}
      PACKAGE_WITH_VERSION: ${{ steps.bump-version.outputs.fullVersion }}
      PREID: ${{ inputs.preid }}
      NO_TAG: ${{ inputs.no-tag == 'true' }}
    shell: bash
    run: |
      echo "Running npm publish"
      npm publish
      if [ ! -z "$PREID" ] && [ "$NO_TAG" <> "true" ]; then
        npm dist-tag add $PACKAGE_WITH_VERSION $PREID
      fi

      echo WORKING_BRANCH is $WORKING_BRANCH
      echo "published=true" >> "$GITHUB_OUTPUT"

