name: '@tjsr/gh-util-actions/version-bump-publish'
description: Update an npm dependency and raise a PR
author: Tim Rowe <tim@tjsr.id.au>
inputs:
  token:
    type: string
    description: 'The GitHub token to use for PR creation'
    required: true
  cache-key:
    type: string
    description: 'The key to use for the node cache'
    required: false
    default: 'node-cache'
  no-publish:
    type: boolean
    description: "Bump the version number, but don't publish the package"
    required: false
    default: false
  no-tag:
    type: boolean
    description: "Bump the version number, but don't tag the commit"
    required: false
    default: false
  node-version:
    type: string
    description: 'The node version to install before running the action'
    required: false
    default: '20.15.1'
  npm-version:
    type: string
    description: 'The npm version to install before running the action'
    default: 'latest'
    required: false
  patchlevel:
    type: string
    description: 'The release level to use for the new version number. [*prerelease|patch|minor|major]'
    required: false
    default: 'prerelease'
  preid:
    type: string
    description: 'The version preid portion to use in the version string, eg "dev"=>1.0.0-dev.0. Requires "release" for not value.'
    required: false
    default: 'dev'
  scope:
    type: string
    description: 'The scope to use for the .npmrc file if it needs overriding'
    required: false
    default: '@tjsr'
  requiresPr:
    type: boolean
    description: 'Whether the action requires a PR to be raised'
    required: false
    default: false

outputs:
  version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
  published:
    description: 'Whether the package was published'
    value: ${{ steps.publish-package.outputs.published == 'true' && 'true' || 'false' }}

runs:
  # run-name: Update ${{ inputs.dependency }} npm dependency and raise a PR
  using: 'composite'
  steps:
  - name: Validate patchlevel input
    id: validate-patchlevel
    shell: bash
    run: |
      if [[ ! ${{ inputs.patchlevel }} =~ ^(prerelease|patch|minor|major)$ ]]; then
        echo "Invalid patchlevel value provided: ${{ inputs.patchlevel }}"
        exit 1
      fi

  - name: Set script path
    shell: bash
    env:
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: |
      SCRIPT_DIR=$GITHUB_ACTION_PATH/scripts
      echo "SCRIPT_DIR=$SCRIPT_DIR" >> $GITHUB_ENV
      echo SCRIPT_DIR is $SCRIPT_DIR

      BASE_BRANCH=${GITHUB_REF#refs/heads/}
      echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV
      echo BASE_BRANCH is $BASE_BRANCH

  # - name: Cache node config and node_modules
  #   uses: actions/cache@main
  #   id: node-cache
  #   with:
  #     path: |
  #       /home/runner/.npm
  #       /home/runner/work/_temp/.npmrc
  #       ~/node_modules
  #     key: ${{ inputs.cache-key || format('{0}-npm-cache-{1}-{2}', runner.OS, github.run_id, github.run_number) }}
  #     restore-keys: |
  #       ${{ runner.OS }}-npm-cache-${{ github.github.run_id }}-${{ github.run_number }}
  #       ${{ runner.OS }}-npm-cache-

  # Setup .npmrc file to publish to GitHub Packages
  - name: "Setup .npmrc file for scope @${{ inputs.scope }}"
    uses: actions/setup-node@v4
    # if: ${{ steps.node-cache.outputs.cache-hit != true }}
    with:
      always-auth: true
      node-version: ${{ inputs.node-version}}
      cache: 'npm'
      registry-url: 'https://npm.pkg.github.com'
      scope: "${{ inputs.scope }}"
      # token: "${{ inputs.token }}"

  - name: Install npm ${{ inputs.npm-version || ' or skip if no version specified' }}
    # if: ${{ inputs.npm-version != '' || !steps.node-cache.outputs.cache-hit }}
    run: npm install -g npm@${{ inputs.npm-version }}
    shell: bash

  - name: Get the latest published version number
    id: get-latest-version
    shell: bash
    env:
      PREID: ${{ inputs.preid }}
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: $SCRIPT_DIR/current-package.sh

  - name: Install ${{ steps.get-latest-version.outputs.name }} dependencies
    id: install
    env:
      NODE_AUTH_TOKEN: "${{ inputs.token }}"
    shell: bash
    run: npm ci

  - name: Set the github user config for the actions bot.
    shell: bash
    run: |
      git config --global user.name "github-actions[bot]"
      git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

  - name: Set working branch
    shell: bash
    env:
      REQUIRES_PR: ${{ inputs.requiresPr }}
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: |
      if [ "$REQUIRES_PR" == 'true' ]; then
        WORKING_BRANCH=$BASE_BRANCH-bump-$PATCHLEVEL/${{ steps.get-latest-version.outputs.nextVersion }}
      else
        WORKING_BRANCH=${GITHUB_REF#refs/heads/}
      fi
      echo "WORKING_BRANCH=$WORKING_BRANCH" >> $GITHUB_ENV
      echo WORKING_BRANCH is $WORKING_BRANCH

  - name: Create a branch if a PR is required
    id: create-branch
    if: ${{ inputs.requiresPr == 'true' }}
    shell: bash
    env:
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: |
      echo "Creating branch $WORKING_BRANCH"
      git switch -c $WORKING_BRANCH

  - name: Set the version to the latest published version then bump the patch version
    id: bump-version
    shell: bash
    env:
      PREID: ${{ inputs.preid }}
      NEXT_VERSION_NUMBER: ${{ steps.get-latest-version.outputs.nextVersion }}
      PACKAGE_NAME: ${{ steps.get-latest-version.outputs.name }}
      PATCHLEVEL: ${{ inputs.patchlevel }}
    run: $SCRIPT_DIR/bump-version.sh

  - name: Fail if the version bump script failed
    if: ${{ steps.bump-version.outputs.version == '' }}
    shell: bash
    run: exit 1

  - name: Fail if the fullVersion is not a value
    if: ${{ steps.bump-version.outputs.fullVersion == '' }}
    shell: bash
    run: exit 1

  # - name: Get the base branch this version is based on.
  #   id: base-branch
  #   if: steps.get-version.outputs.hasNewVersion == 'true' && steps.check-pr-exists.outputs.exists == 'false'
  #   shell: bash
  #   run: |
  #     BASE_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
  #     echo "PR will be based off branch $BASE_BRANCH"
  #     echo "branch=$BASE_BRANCH" >> "$GITHUB_OUTPUT"

  - name: Commit and push package.json files to same branch
    id: push-package-json
    env:
      PACKAGE_WITH_VERSION: ${{ steps.bump-version.outputs.fullVersion }}
      REQUIRES_PR: ${{ inputs.requiresPr == 'true' }}
    shell: bash
    run: |
      echo "Committing $PACKAGE_WITH_VERSION package.json changes"
      git add package.json package-lock.json
      git commit -m "Update $PACKAGE_NAME to $PACKAGE_WITH_VERSION"
      # git pull --rebase
      echo "Pushing to $WORKING_BRANCH without tags..."
      git push -u origin $WORKING_BRANCH

      echo "Current git status at end of commit/push step: "
      git status

  - name: Create a Pull Request for the changes
    id: create-pr
    if: ${{ inputs.requiresPr == 'true' }}
    uses: peter-evans/create-pull-request@v6
    with:
      commit-message: Bump ${{ steps.get-latest-version.outputs.name }} to ${{ steps.bump-version.outputs.fullVersion }} via tjsr/gh-util-actions/version-bump-publish
      title: Update ${{ steps.get-latest-version.outputs.name }} to ${{ steps.bump-version.outputs.fullVersion }}
      base: ${{ env.BASE_BRANCH }}
      branch: ${{ env.WORKING_BRANCH }}

  - name: Add labels to the newly created PR
    if: ${{ steps.create-pr.outputs.pull-request-number != '' && inputs.labels != '' }}
    uses: tjsr/gh-util-actions/label-pr@main
    with:
      labels: '${{ inputs.patchlevel }}'
      pr: ${{ steps.create-pr.outputs.pull-request-number }}

  - name: Tag if required
    id: git-tag
    if: ${{ inputs.no-tag != 'true' }}
    shell: bash
    env:
      VERSION_TAG: 'v${{ steps.bump-version.outputs.version }}'
      PACKAGE_WITH_VERSION: ${{ steps.bump-version.outputs.fullVersion }}
      PACKAGE_NAME: ${{ steps.get-latest-version.outputs.name }}
    run: |
      echo "Current git status in tag step: "
      git status

      if git tag | grep -q "^$VERSION_TAG$"; then
        echo "Tag $VERSION_TAG exists, deleting first..."
        echo "Deleting existing tag $VERSION_TAG if it exists."
        git tag -d "$VERSION_TAG"
      else
        echo "Tag $VERSION_TAG does not exist"
      fi
      echo "Tagging $VERSION_TAG"
      git tag -fa "$VERSION_TAG" -m "Update $PACKAGE_NAME to $PACKAGE_WITH_VERSION"

      echo "Pushing git tags."
      git push --tags -f

  - name: Verify the version in package.json matches what we expect
    id: verify-version
    shell: bash
    env:
      NEXT_VERSION_NUMBER: ${{ steps.get-latest-version.outputs.nextVersion }}
    run: |
      echo "Current git status in verify step: "
      git status

      CONFIRMED_PACKAGE_VERSION_NUMBER=$(cat package.json | jq -r '.version')
      echo "Confirmed packags.json was written with version $CONFIRMED_PACKAGE_VERSION_NUMBER - should be $NEXT_VERSION_NUMBER"
      if [ "$CONFIRMED_PACKAGE_VERSION_NUMBER" != "$NEXT_VERSION_NUMBER" ]; then
        echo "Error: package.json was not written with the expected version number"
        exit 1
      fi

  - name: Publish the package
    id: publish-package
    if: ${{ inputs.no-publish != 'true' }}
    env:
      NODE_AUTH_TOKEN: ${{ inputs.token }}
      PACKAGE_WITH_VERSION: ${{ steps.bump-version.outputs.fullVersion }}
      PREID: ${{ inputs.preid }}
      NO_TAG: ${{ inputs.no-tag == 'true' }}
    shell: bash
    run: |
      echo "Current git status in publish step: "
      git status

      echo "Running npm publish"
      npm publish
      if [ ! -z "$PREID" ] && [ "$NO_TAG" <> "true" ]; then
        npm dist-tag add $PACKAGE_WITH_VERSION $PREID
      fi

      echo WORKING_BRANCH is $WORKING_BRANCH
      echo "published=true" >> "$GITHUB_OUTPUT"

